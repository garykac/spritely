NAME add_title
TITLE Adding a Title screen
PROJECT_NAME title
CATEGORY Basic Game Tasks
AUTHOR Copyright &copy;2008-9 Gary Kacmarcik

<p>
This tutorial show you how to add a title screen to your project.
</p>

VERIFIED

# =================================================================
STEP Create basic level
# =================================================================

<p>
First, we can create a basic game level. For this tutorial, we're just going to 
add a single sprite, but you can make your level as complex as you wish by
following the other tutorials.
</p>

IMAGE sprite_small.png

SPRITELY_ACTION draw_sample_2x2_sprite 0

# =================================================================
STEP Create your title screen
# =================================================================

<p>
Create a 240x160 image for your title screen (using any drawing program that you wish).
</p>

IMAGE welcome_paint.png

# =================================================================
STEP Import image into Spritely
# =================================================================

Switch to the "Background Images" tab and press the "Import..." button 
(located near the bottom left). Use the file select dialog to select
your image.

IMAGE import_small.png

SPRITELY_ACTION import_bgimage welcome.bmp

# =================================================================
STEP Rename the image
# =================================================================

<p>
The default image name is auto-generated from the filename. Click on the "Info" button
(next to the imported image) and rename the image for the title screen to "Welcome".
</p>

IMAGE bgimage_name.png

# =================================================================
STEP Export project
# =================================================================

Export your project and open the project file so that we can edit code..

SPRITELY_ACTION export full

# =================================================================
STEP Define a new "level" for the title screen
# =================================================================

FIND game_state.h
.// The levels in our game.
.const int kLevel_1 = 1;
END_FIND

UPDATE game_state.h
.// The levels in our game.
+const int kLevel_Title = 0;
.const int kLevel_1 = 1;
END_UPDATE

# =================================================================
STEP Modify SetupStage to support the title screen
# =================================================================

FIND game_state.cpp
.// SetupStage
.// This sets up the stage for each level.
.void GameState::SetupStage(int level) {
.	// Record which level we're in.
.	_level = level;
.
.	SetupStage_Level1();
.}
END_FIND

<p>
Previously, we just always setup for Level1. Now we need to setup the stage for the appropriate
level.
</p>

UPDATE game_state.cpp
.// SetupStage
.// This sets up the stage for each level.
.void GameState::SetupStage(int level) {
.	// Record which level we're in.
.	_level = level;
.
-	SetupStage_Level1();
+	if (_level == kLevel_Title) {
+		SetupStage_Title();
+	}
+
+	if (_level == kLevel_1) {
+		SetupStage_Level1();
+	}
+
+	// TODO: Add support for other game levels here.
.}
+
+void GameState::SetupStage_Title() {
+	// Set bitmap mode to display title.
+	SetBitmapVideoMode();
+
+	// Load the background image.
+	LoadBgImage(kBgImage_Welcome);
+}
END_UPDATE

<p>
Since we're using background images, we need to include the background image
definitions from <tt>background_images.h</tt>. Add an <tt>#include</tt>
statement at the top of the file to include these definitions.
</p>

UPDATE game_state.cpp
+#include "background_images.h"
.#include "game_state.h"
.#include "game_utils.h"
.#include "object_utils.h"
END_UPDATE

<p>
Notice that we added a new routine at the end: <tt>GameState::SetupStage_Title()</tt>.
When we add a new routine like this, we need to declare it in the <tt>.h</tt> file
as well.
</p>

UPDATE game_state.h
.	// SetupStage
.	// Set up the stage (backgrounds, sprites) for the each level.
.	void SetupStage(int level);
+	void SetupStage_Title();
.	void SetupStage_Level1();
END_UPDATE

# =================================================================
STEP Make sure the game starts at the title screen level
# =================================================================

<p>
Now we need to have the game start at the title screen. Find the following
code:
</p>

FIND game_state.cpp
.GameState::GameState() {
.	// Setup the stage for level 1.
.	SetupStage(kLevel_1);
.}
END_FIND

<p>
This tells the game to start at level 1. Change it to start at the title
screen.
</p>

UPDATE game_state.cpp
.GameState::GameState() {
<	// Setup the stage for level 1.
>	// Start with the title screen.
<	SetupStage(kLevel_1);
>	SetupStage(kLevel_Title);
.}
END_UPDATE

# =================================================================
STEP Build/Run
# =================================================================

<p>
Now if you build and run, you'll be taken to your title screen instead of to "Level 1".
Unfortunately, we have no way of progressing to Level 1 from the title screen.
To fix this, we'll make changes to the <tt>GameState::Update()</tt> routine.
</p>

VERIFY_BUILD

IMAGE ss_welcome.png

# =================================================================
STEP Modify Update to support the title screen
# =================================================================

<p>
In <tt>GameState::Update()</tt>, find:
</p>

FIND game_state.cpp
.	// Handle input and updates for level 1.
.	Update_Level1();
.}
END_FIND

<p>
And replace with:
</p>

UPDATE game_state.cpp
-	// Handle input and updates for level 1.
-	Update_Level1();
+	// Handle input for title screen.
+	if (_level == kLevel_Title) {
+		Update_Title();
+	}
+
+	// Handle input for level 1.
+	if (_level == kLevel_1) {
+		Update_Level1();
+	}
+
+	// TODO: Add support for other game levels here.
.}
+
+void GameState::Update_Title() {
+	if (CheckKeyPress(KEY_START)) {
+		SetupStage(kLevel_1);
+	}
+}
END_UPDATE

<p>
The <tt>Update_Title()</tt> code says to check for the START key and
to go to level 1 if it is pressed.
</p>

<p>
As before, we added a new routine to <tt>GameState</tt>, so we need to 
add a declaration in <tt>game_state.h</tt>:
</p>

UPDATE game_state.h
.	// Update
.	// This is called continuously to update the game to the next state.
.	void Update();
+	void Update_Title();
.	void Update_Level1();
END_UPDATE

VERIFY_BUILD

# =================================================================
FINISH
# =================================================================

<p>
We're done.
</p>

FILE_LINKS
