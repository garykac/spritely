NAME creating_pong
TITLE Creating Pong
PROJECT_NAME pong
CATEGORY GameProject
AUTHOR Copyright &copy;2008-9 Gary Kacmarcik

<p>
This tutorial show you how to create the game Pong from start to finish using
Spritely.
This tutorial will show you how to create the game Pong for the Gameboy Advance
or Nintendo DS.
This tutorial covers the process from start to finish using Spritely (to create
the sprites and initial project code) and devKitPro (to build the project into
a GBA or NDS ROM).
</p>

VERIFIED

# =================================================================
STEP Create a new project
# =================================================================

Create a new directory for your project: <tt>c:\gamedev\projects\pong</tt>.

# =================================================================
STEP Create your sprites
# =================================================================

<p>
For Pong, we need to create 3 objects on the screen:
</p>
<ul>
<li>the player's paddle</li>
<li>the opponent's paddle, and</li>
<li>the ball</li>
</ul>

<p>
The 2 paddles look the same so they can share the same sprite. Thus, we only
need to create 2 different sprites: one for the paddles and another for the ball.
</p>

<p>
Launch Spritely:
<ul>
<li>delete the default 2x2 sprite (we don't need it)</li>
<li>create a 1x1 solid white square for the ball</li>
<li>create a 1x4 (tall) solid white rectangle for the paddle</li>
</ul>
</p>

SPRITELY_ACTION delete_sprite
SPRITELY_ACTION add_sprite 1x1 Ball
SPRITELY_ACTION select_color 4
SPRITELY_ACTION fill_sprite 0,0
SPRITELY_ACTION add_sprite 1x4 Paddle
SPRITELY_ACTION fill_sprite 0,0

<p>
Select the paint bucket tool and fill each sprite with white paint.
</p>

IMAGE sprites_small.png

# =================================================================
STEP Name your sprites
# =================================================================

<p>
We need to name the sprites so that we can refer to them (by name) in the code.
</p>

<p>
You can change the name of a sprite by selecting the "Sprite::Properties..." menu item or
by pressing the "Info" button in the sprite editing window.
</p>

<p>
Name the ball "Ball" and the paddle "Paddle". Pay attention to capitalization - begin each
name with a capital letter and be consistent.
We'll need to remember these names when we start editing the source code.
</p>

IMAGE name_ball.png

IMAGE name_paddle.png

# =================================================================
STEP Create the background
# =================================================================

<p>
Click on the "Background Maps" tab to look at the background sprites. By default, you
should have a single 1x1 background sprite and a single background map that has this
background sprite used throughout.
</p>

SPRITELY_ACTION fill_bgsprite 0,0

<p>
Use the paint bucket and fill the 1x1 sprite with black paint.
Once you do this, the entire background map will turn black.
</p>

IMAGE bg_sprites_small.png

# =================================================================
STEP Save your progress
# =================================================================

<p>
Select the "File::Save" menu to save your work as <tt>pong.xml</tt> in the
<tt>c:\gamedev\projects\pong</tt> directory you created earlier.
</p>

# =================================================================
STEP Export project
# =================================================================

<p>
Export a complete GBA project into <tt>c:\gamedev\projects\pong</tt>.
</p>

SPRITELY_ACTION export full

<p>
See the
TUTORIAL_LINK create_sprite Creating a simple sprite
tutorial if you need more information about how this is done.
</p>

# =================================================================
STEP Open the project in Programmer's Notepad
# =================================================================

<p>
Open the "pong.pnproj" file. When you exported the project, this file was
created for you in the <tt>c:\gamedev\projects\pong</tt> directory.
</p>

IMAGE pnproj.png

# =================================================================
STEP Build/Run your project
# =================================================================

<p>
Now that we're all set up, we can build and run the project.
</p>

<p>
When you run the project, you'll see only the ball that you can move around
using the arrow keys.
We need
to start modifying the source code to display the other objects and turn this into a
complete game.
</p>

VERIFY_BUILD

IMAGE ss_01.png

# =================================================================
STEP Define the objects from the sprites
# =================================================================

<p>
Remember that we need 3 objects for pong: 2 paddles (1 each for the player
and opponent) and 1 ball. Let's define these objects.
</p>

<p>
In the GBA and NDS, we can have a maximum of 128 objects, numbered 0 through 127.
We're already using object #0 for the player, so we'll use object #1 and #2 for the
opponent and ball.
</p>

<p>
Open <tt>game_state.h</tt> and look for the following lines:
</p>

FIND game_state.h
.// The objects in our game.
.// Only 128 objects (0-127) can be defined at any time.
.const int kObj_Player = 0;
END_FIND

<p>
This assigns the player object to object #0.
</p>

<p>
Add the following 2 lines immediately after:
</p>

UPDATE game_state.h
.// The objects in our game.
.// Only 128 objects (0-127) can be defined at any time.
.const int kObj_Player = 0;
+const int kObj_Opponent = 1;
+const int kObj_Ball = 2;
END_UPDATE

<p>
Here we are assigning the opponent's paddle (kObj_Opponent) to object 1 and the 
ball (kObj_Ball) to object 2.
</p>

<p>
Pay attention to capitalization!
You'll need to remember (and type) these names later.
</p>

# =================================================================
STEP Add storage for the object locations
# =================================================================

<p>
We need to keep track of each object's location on the screen, so we need to
add the following to the GameState class:
</p>

<p>
Look for the following lines in <tt>game_state.h</tt>:
</p>

FIND game_state.h
.	// The (x,y) location of the object representing the player.
.	int _xPlayer, _yPlayer;
.};
END_FIND

<p>
and add the following lines immediately after:
</p>

UPDATE game_state.h
.	// The (x,y) location of the object representing the player.
.	int _xPlayer, _yPlayer;
+
+	// The (x,y) location of the opponent's paddle.
+	int _xOpponent, _yOpponent;
+
+	// The (x,y) location of the ball.
+	int _xBall, _yBall;
.};
END_UPDATE

<p>
Just like the earlier <tt>int _xPlayer, _yPlayer;</tt> line defined space to store
the x- and y-coordinate of the player, these lines define space to store the
x- and y-coordinate of the opponent (the opponent's paddle) and the ball.
</p>

<p>
Build your project after making these changes to make sure you don't have any
compilation errors.
Don't bother running since we haven't changed anything important yet. You won't see
any visible differences from the previous version.
</p>

VERIFY_BUILD

# =================================================================
STEP Create the new objects
# =================================================================

<p>
Open <tt>game_state.cpp</tt> and look for the following lines in <tt>GameState::SetupStage_Level1</tt>:
</p>

FIND game_state.cpp
.	// Initialize the objects for the first level.
.	InitObject(kObj_Player, 0);
END_FIND

<p>
Change this to:
</p>

UPDATE game_state.cpp
.	// Initialize the objects for the first level.
<	InitObject(kObj_Player, 0);
>	InitObject(kObj_Player, kSprites_Paddle);
END_UPDATE

<p>
This will force the player object user the "Paddle" sprite.
</p>

<p>
Add the following 2 lines immediately after:
</p>

UPDATE game_state.cpp
.	// Initialize the objects for the first level.
.	InitObject(kObj_Player, kSprites_Paddle);
+	InitObject(kObj_Opponent, kSprites_Paddle);
+	InitObject(kObj_Ball, kSprites_Ball);
END_UPDATE


<p>
These lines create the other 2 objects that we need for the game: the <i>Opponent</i>,
which also uses a "Paddle" sprite and the <i>Ball</i>, which uses a "Ball" sprite.
</p>

# =================================================================
STEP Initialize the object location
# =================================================================

<p>
Further down in <tt>GameState::SetupStage_Level1()</tt>, find:
</p>

FIND game_state.cpp
.	// Set the initial location of each object.
.	_xPlayer = 0;
.	_yPlayer = 0;
.	MoveObjectTo(kObj_Player, _xPlayer, _yPlayer);
.
.	// TODO: Add more initialization for level 1 here.
.}
END_FIND

<p>
These lines move the player object to its initial position. Change the <tt>_xPlayer = 0;</tt>
line to:
</p>

UPDATE game_state.cpp
.	// Set the initial location of each object.
<	_xPlayer = 0;
>	_xPlayer = SCREEN_WIDTH - GetObjectWidth(kObj_Player) - 8;
.	_yPlayer = 0;
.	MoveObjectTo(kObj_Player, _xPlayer, _yPlayer);
.
.	// TODO: Add more initialization for level 1 here.
.}
END_UPDATE

<p>
This will put the player's paddle on the right side of the screen. It calculates this position
by starting from the right side of the screen (SCREEN_WIDTH) and subtracting off the width
of the player's paddle (GetObjectWidth(kObj_Player). It then subtracts off an additional
8 pixels to add a bit of space behind (to the right of) the player's paddle.
</p>

<p>
We can now initialize the remaining objects (the opponent and the ball).
Add the following lines immediately after:
</p>

UPDATE game_state.cpp
.	// Set the initial location of each object.
.	_xPlayer = SCREEN_WIDTH - GetObjectWidth(kObj_Player) - 8;
.	_yPlayer = 0;
.	MoveObjectTo(kObj_Player, _xPlayer, _yPlayer);
.
+	_xOpponent = 8;
+	_yOpponent = 0;
+	MoveObjectTo(kObj_Opponent, _xOpponent, _yOpponent);
+
+	_xBall = SCREEN_WIDTH / 2;
+	_yBall = 0;
+	MoveObjectTo(kObj_Ball, _xBall, _yBall);
+
.	// TODO: Add more initialization for level 1 here.
.}
END_UPDATE

<p>
This places the opponent's paddle on the left side of the screen (with 8 pixels of space
behind it) and puts the ball at the middle of the top of the screen.
</p>

# =================================================================
STEP Build/Run
# =================================================================

VERIFY_BUILD

<p>
If you run now, you'll see 3 objects on the screen in their correct initial positions.
</p>

<p>
Only the player paddle will move - but it can move all over the screen. We need to fix it
so that it only moved up and down. We also need to constrain the movement to stay within the
screen bounds.
</p>

IMAGE ss_02.png

<p>
Let's make it so that the paddle only goes up/down:
</p>

# =================================================================
STEP Restrict player paddle movement
# =================================================================

<p>
In <tt>GameState::Update_Level1()</tt>, which is a bit further down in <tt>game_state.cpp</tt>,
remove the lines that handle the left and right arrow keys:
</p>

UPDATE game_state.cpp
.	// The arrow keys are used to move the current object.
.	// We use CheckKeyHeld() because we want the action to repeat as long
.	// as the player is holding down the button.
.	int dx = 0;
.	int dy = 0;
x	if (CheckKeyHeld(KEY_LEFT))
x		dx = -1;
x	if (CheckKeyHeld(KEY_RIGHT))
x		dx = 1;
.	if (CheckKeyHeld(KEY_UP))
.		dy = -1;
.	if (CheckKeyHeld(KEY_DOWN))
.		dy = 1;
END_UPDATE

<p>
To prevent the paddle from going off the top or the bottom of the screen,
insert the following lines:
</p>

UPDATE game_state.cpp
.	// If we need to move the player.
.	if (dx != 0 || dy != 0) {
+		// Calculate the player's new y-location.
+		int y = _yPlayer + dy;
+
+		// Don't let the player go outside the screen boundaries.
+		if (y < 0 || y > SCREEN_HEIGHT - GetObjectHeight(kObj_Player))
+			dy = 0;
+
.		// Record the player's new location.
.		_xPlayer += dx;
.		_yPlayer += dy;
.
.		// Move the player to the new location.
.		MoveObjectTo(kObj_Player, _xPlayer, _yPlayer);
.	}
END_UPDATE

<p>
This checks the player position against the screen boundary and stops the movement (by setting
<tt>dy = 0;</tt>).
</p>

# =================================================================
STEP Build/Run
# =================================================================

<p>
If you build and run, the player's paddle only moves up and down.
</p>

VERIFY_BUILD

<p>
Let's make the ball move.
</p>

# =================================================================
STEP Make the ball move
# =================================================================

<p>
Go to the end of <tt>GameState::Update_Level1()</tt> (which is at the end of <tt>game_state.cpp</tt>)
and look for: </p>

FIND game_state.cpp
.	// TODO: Add additional game state updates for level 1 here.
.}
END_FIND

<p>
And add the following code before the comment:
</p>

UPDATE game_state.cpp
+	// Move the ball.
+	_xBall += 1;
+	_yBall += 1;
+	MoveObjectTo(kObj_Ball, _xBall, _yBall);
+
.	// TODO: Add additional game state updates for level 1 here.
.}
END_UPDATE

# =================================================================
STEP Build/Run
# =================================================================

VERIFY_BUILD

<p>
Build and run. The ball moves, but it only goes down/right and it goes off the screen.
It comes back after a while only to fly off again.
</p>

IMAGE ss_03.png

<p>
We want the ball to move different directions and we want it to bounce when it gets
to the edge of the screen.
</p>

# =================================================================
STEP Add storage for the ball direction
# =================================================================

<p>
Just like we need to keep track of the current ball <i>position</i>, we also need to keep
track of its current <i>direction</i>. This will allow us to change the ball's direction
and have it bounce correctly off of other objects.
</p>

<p>
Let's make some room to save the balls current direction. Go back to <tt>game_state.h</tt>
and add the following to the GameState class:
</p>

UPDATE game_state.h
.	// The (x,y) location of the ball.
.	int _xBall, _yBall;
+
+	// The current direction that the ball is moving (-1 or 1).
+	int _dxBall, _dyBall;
.};
END_UPDATE

<p>
These variables keep track of the x-direction (is the ball moving left or right)
and the y-direction (is it moving up or down) for the ball.
</p>

# =================================================================
STEP Initialize the ball direction
# =================================================================

<p>
Now go back to <tt>game_state.cpp</tt> and initialize the ball direction.
</p>

<p>
Add the following at the end of <tt>GameState::SetupStage_Level1()</tt>:
</p>

UPDATE game_state.cpp
.	_xBall = SCREEN_WIDTH / 2;
.	_yBall = 0;
.	MoveObjectTo(kObj_Ball, _xBall, _yBall);
.
+	// Initialize the ball direction.
+	_dxBall = 1;
+	_dyBall = 1;
+
.	// TODO: Add more initialization for level 1 here.
.}
END_UPDATE

<p>
and change the ball update code at the end of <tt>GameState::Update_Level1()</tt>
from:
</p>

FIND game_state.cpp
.	// Move the ball.
.	_xBall += 1;
.	_yBall += 1;
.	MoveObjectTo(kObj_Ball, _xBall, _yBall);
.
.	// TODO: Add additional game state updates for level 1 here.
.}
END_FIND

<p>
to:
</p>

UPDATE game_state.cpp
.	// Move the ball.
<	_xBall += 1;
>	_xBall += _dxBall;
<	_yBall += 1;
>	_yBall += _dyBall;
.	MoveObjectTo(kObj_Ball, _xBall, _yBall);
.
.	// TODO: Add additional game state updates for level 1 here.
.}
END_UPDATE

# =================================================================
STEP Build/Run
# =================================================================

VERIFY_BUILD

<p>
If you build/run now, it will act the same as before. but now that we're storing
the direction in a variable, we can change it whenever we want.
</p>

# =================================================================
STEP Bounce off screen boundaries
# =================================================================

<p>
Let's make the ball respect the screen boundaries.
</p>

<p>
Add the following to <tt>GameState::Update_Level1()</tt>, just
before the code to move the ball:
</p>

UPDATE game_state.cpp
.		// Move the player to the new location.
.		MoveObjectTo(kObj_Player, _xPlayer, _yPlayer);
.	}
.
+	// Check where the ball is moving.
+	int x = _xBall + _dxBall;
+	int y = _yBall + _dyBall;
+
+	// Don't let the ball go off the left/right side of screen.
+	if (x < 0 || x > SCREEN_WIDTH - GetObjectWidth(kObj_Ball))
+		_dxBall *= -1;
+
+	// Don't let the ball go off the top/bottom of screen.
+	if (y < 0 || y > SCREEN_HEIGHT - GetObjectHeight(kObj_Ball))
+		_dyBall *= -1;
+
.	// Move the ball.
.	_xBall += _dxBall;
.	_yBall += _dyBall;
.	MoveObjectTo(kObj_Ball, _xBall, _yBall);
END_UPDATE

<p>
The <tt>_dxBall *= -1;</tt> line is interesting. What this does is change <tt>1</tt>
to <tt>-1</tt> and <tt>-1</tt> to <tt>1</tt>. So if the ball is moving left
(<i>dxBall = -1</i>), it is changed to move right (<i>dxBall = 1</i>). Similarly, a
ball moving right (<i>dxBall = 1</i>) is changed to move left (<i>dxBall = -1</i>).
</p>

<p>
The <tt>_dyBall *= -1;</tt> does the same thing for the ball moving up/down.
</p>

# =================================================================
STEP Build/Run
# =================================================================

VERIFY_BUILD

<p>
If you build/run now, the ball will bounce around the screen, but it will still
ignore the paddles
</p>

IMAGE ss_04.png

# =================================================================
STEP Bounce off paddles
# =================================================================

<p>
Add the following code immediately after the code you just added:
</p>

UPDATE game_state.cpp
.	// Don't let the ball go off the top/bottom of screen.
.	if (y < 0 || y > SCREEN_HEIGHT - GetObjectHeight(kObj_Ball))
.		_dyBall *= -1;
.
+	// Does the ball collide with a paddle?
+	if (CollideBBox(kObj_Player, kObj_Ball))
+		_dxBall = -1;
+	if (CollideBBox(kObj_Opponent, kObj_Ball))
+		_dxBall = 1;
+
.	// Move the ball.
.	_xBall += _dxBall;
.	_yBall += _dyBall;
.	MoveObjectTo(kObj_Ball, _xBall, _yBall);
END_UPDATE

<p>
This code tells the ball to go left (<tt>_dxBall = -1</tt>) if it collides with
the player's paddle and to go right (<tt>_dxBall = 1</tt>) if it collides with
the opponent's paddle. Note that the y-direction is not affected - if the ball is
going up when it hits a paddle, it will continue to go up after it bounces off.
</p>

<p>
However, if we try to build now, we'll get an error:
</p>

<pre>error: 'CollideBBox' was not declared in this scope</pre>

<p>
This means that it doesn't know about CollideBBox. We need to tell it where it is defined.
</p>

<p>
We do this by adding a reference to "collision.h" at the top of the file:
</p>

UPDATE game_state.cpp
+#include "collision.h"
.#include "game_state.h"
.#include "game_utils.h"
.#include "object_utils.h"
END_UPDATE

# =================================================================
STEP Build/Run
# =================================================================

VERIFY_BUILD

<p>
Now if you build and run, it will successfully compile and the ball will bounce off
the paddles.
</p>

IMAGE ss_05.png

# =================================================================
STEP Opponent AI
# =================================================================

<p>
The opponent paddle is boring. Let's add some <i>really simple</i> AI (<i>Artificial Intelligence</i>)
to make it play pong.
</p>

<p>
At the bottom of the <tt>GameState::Update_Level1()</tt>, just after the code to move the
ball, add the following:
</p>

UPDATE game_state.cpp
.	// Move the ball.
.	_xBall += _dxBall;
.	_yBall += _dyBall;
.	MoveObjectTo(kObj_Ball, _xBall, _yBall);
+
+	// Handle opponent AI.
+	dy = 0;
+	// If the ball is above the paddle.
+	if (_yBall < _yOpponent) {
+		// Move the paddle up.
+		dy = -1;
+		// Unless that would move the paddle above the top of the screen.
+		if (_yOpponent < 0)
+			dy = 0;
+	} else {
+		// Otherwise, move the paddle down.
+		dy = 1;
+		// Unless that would move the paddle below the bottom of the screen.
+		if (_yOpponent > SCREEN_HEIGHT - GetObjectHeight(kObj_Opponent))
+			dy = 0;
+	}
+
+	// Move the paddle.
+	_yOpponent += dy;
+	MoveObjectTo(kObj_Opponent, _xOpponent, _yOpponent);
.
.	// TODO: Add additional game state updates for level 1 here.
.}
END_UPDATE

# =================================================================
STEP Build/Run
# =================================================================

VERIFY_BUILD

<p>
Build and run. The opponent's paddle will move up and down tracking the ball.
</p>

# =================================================================
FINISH
# =================================================================

<p>
And we're done!
</p>

FILE_LINKS
