// animation.h
// Animation structures and function prototypes.
// This file was automatically generated by Spritely %%_VERSION_%%

#ifndef _ANIMATION_H_
#define _ANIMATION_H_

// AnimationInfo
// Animation is achieved by looping through a set of sprites (from nFirstFrame
// to nLastFrame) at a given frame rate (defined by nFrameRate).
// nCurrentFrame and nFrameRateCounter are used to keep track of the current
// state of the animation.
typedef struct {
	// The update frequency.
	// This controls how long to wait before going to the next animation frame.
	// Setting this to 1 will update the animation 60 times a second (which is
	// most likely too fast).
	//   1=60fps, 2=30fps, 3=20fps, 4=15fps, ..., 10=6fps, ..., 60=1fps
	// Reasonable values are 10 (6 frames/second) or 15 (4 frames/second).
	int upd_freq;

	// Object being animated.
	int object_id;

	// Sprite index of the first animation frame.
	int first_sprite;
	// Sprite index of the last animation frame.
	int last_sprite;

	// The current frame (sprite index) being shown on the screen.
	int current_frame;
	
	// This counter keeps track of the number of cycles so that we know when we
	// need to update the object to the next frame.
	int update_counter;
} AnimationInfo;

void InitAnimation(AnimationInfo *ai, int object, int first, int last, int updfreq);
void SetAnimationFrame(AnimationInfo *ai, int frame);
void UpdateAnimation(AnimationInfo *ai);

#endif	// _ANIMATION_H_
